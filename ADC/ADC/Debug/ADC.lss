
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000697  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000024d  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000018  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	//Selección de la referencia de voltaje
	ADMUX &=~ (1 << REFS1);
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8f 77       	andi	r24, 0x7F	; 127
  88:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);
  8a:	80 81       	ld	r24, Z
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	80 83       	st	Z, r24
	
	ADMUX &=~ (1 << ADLAR); //Ajuste de bits ADCL
  90:	80 81       	ld	r24, Z
  92:	8f 7d       	andi	r24, 0xDF	; 223
  94:	80 83       	st	Z, r24
	
	//Selección del pin de ADC (el 4 es  un bit reservado)
	ADMUX &=~ (1 << MUX3);
  96:	80 81       	ld	r24, Z
  98:	87 7f       	andi	r24, 0xF7	; 247
  9a:	80 83       	st	Z, r24
	ADMUX &=~ (1 << MUX2);
  9c:	80 81       	ld	r24, Z
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	80 83       	st	Z, r24
	ADMUX &=~ (1 << MUX1);
  a2:	80 81       	ld	r24, Z
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	80 83       	st	Z, r24
	ADMUX &=~ (1 << MUX0);
  a8:	80 81       	ld	r24, Z
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	80 83       	st	Z, r24

	
    ADCSRA |= (1 << ADEN); //Se habilita el ADC
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //Comienza la conversión de ADC
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADATE); //Auto trigger habilitado
  be:	80 81       	ld	r24, Z
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	80 83       	st	Z, r24
	
	//Clock division (entre 2)
	ADCSRA |= (1 << ADPS2);
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
	ADCSRA &=~ (1 << ADPS1);
  ca:	80 81       	ld	r24, Z
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	80 83       	st	Z, r24
	ADCSRA &=~ (1 << ADPS0);
  d0:	80 81       	ld	r24, Z
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	80 83       	st	Z, r24
	
	DDRB |= (1<<0); //Pin del led como salida
  d6:	84 b1       	in	r24, 0x04	; 4
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	84 b9       	out	0x04, r24	; 4
	
	int adc = 0;
	
    while (1) 
    {
		ADCSRA |= (1 << ADEN); //Se habilita el ADC
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADSC); //Comienza la conversión de ADC
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
		
		ADCSRA |= (1 << ADIF); //Se habilita cuando la conversión ADC termina
  ec:	80 81       	ld	r24, Z
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	80 83       	st	Z, r24
		
		adc = (ADC*5)/1024; 
  f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  fa:	9c 01       	movw	r18, r24
  fc:	22 0f       	add	r18, r18
  fe:	33 1f       	adc	r19, r19
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	82 0f       	add	r24, r18
 106:	93 1f       	adc	r25, r19
 108:	29 2f       	mov	r18, r25
 10a:	26 95       	lsr	r18
 10c:	26 95       	lsr	r18
 10e:	30 e0       	ldi	r19, 0x00	; 0
		
		if(adc >= 3){
 110:	23 30       	cpi	r18, 0x03	; 3
 112:	31 05       	cpc	r19, r1
 114:	24 f0       	brlt	.+8      	; 0x11e <main+0x9e>
			PORTB |= (1 << 0);
 116:	85 b1       	in	r24, 0x05	; 5
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	85 b9       	out	0x05, r24	; 5
 11c:	df cf       	rjmp	.-66     	; 0xdc <main+0x5c>
		}else{
			PORTB &=~ (1 << 0);
 11e:	85 b1       	in	r24, 0x05	; 5
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	85 b9       	out	0x05, r24	; 5
 124:	db cf       	rjmp	.-74     	; 0xdc <main+0x5c>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
